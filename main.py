import numpy as np
import pandas as pd


#print images and labels to show pertubation and classifiers work(note i have visualizer of images)
def printVisuals(data, class1, class2):
    print("output presentaiton")


#test metrics of the classifier
def testClass(classifier):
    print("metrics about classifier idk yet")


#generate trained classifier on data on data classifiying as 0-6 based on class
def whatMethod(data):
    model = "trained model temp"
    return model


#generate trained classifier on data classifing as adversarial or not
def isAdversarial(data):
    model = "trained model temp"
    return model


#generate perturbed images based on model with random perturbation
def randun(data, model):
    return data


#generate perturbed images based on model with perturbation generated by targeted C&W algo
def cnwtar(data, model):
    return data


#generate perturbed images based on model with perturbation generated by targeted DeepFool algo
def dftar(data, model):
    return data


#generate perturbed images based on model with perturbation generated by untargeted DeepFool algo
def dfun(data, model):
    return data


#generate perturbed images based on model with perturbation generated by targeted FGSM algo
def fgsmtar(data, model):
    return data


#generate perturbed images based on model with perturbation generated by untargeted FGSM algo
def fgsmun(data, model):
    return data


#train neural net need for perturbation algos
def trainModel(data):
    #temp
    print("hi")
    model = "trained nn temp"
    return model


#main method(may be abastracted more)
def main():
    # ---------------- #
    # data collection  #
    # ---------------- #

    #Download dataset
    data = pd.read_csv('mnist_train.csv');
    data = np.array(data);
    #Note first row is eaten as titles in csv so 00 is 10
    print(data[0][0]); #test

    #Note may want to export this to seperate file and download completed model as a file
    model = trainModel(data[:6000]); #this will generate our trained neuralnet on data 0-5999

    #output is images and new number label
    #we should do our best to abstract here some parts should be applicapable to all algs
    fgsmUntargetedOut = fgsmun(data[6000:6200], model);
    fgsmTargetedOut = fgsmtar(data[6200:6400], model);
    deepFoolUntargetedOut = dfun(data[6400:6600], model);
    deepFoolTargetedOut = dftar(data[6600:6800], model);
    carAndWagTargetedOut = cnwtar(data[6800:7000], model);
    randUntargetedOut = randun(data[7000:7200], model);

    #stack data
    trainingData = np.vstack((data[:6000],fgsmUntargetedOut,fgsmTargetedOut,deepFoolUntargetedOut,deepFoolTargetedOut,carAndWagTargetedOut,randUntargetedOut));

    #relabeling where 0 is unperturbed 1 is perturbed
    arr1 = np.zeros((6000, 1), dtype=int)
    arr2 = np.ones((1200, 1), dtype=int)
    trainingData1 = np.hstack((np.vstack((arr1, arr2)), trainingData))

    arr2 = np.full((200, 1), 1);
    arr3 = np.full((200, 1), 2);
    arr4 = np.full((200, 1), 3);
    arr5 = np.full((200, 1), 4);
    arr6 = np.full((200, 1), 5);
    arr7 = np.full((200, 1), 6);
    arr0 = np.vstack((arr1, arr2, arr3, arr4, arr5, arr6, arr7));
    trainingData2 = np.hstack((arr0, trainingData))

    # --------------------------- #
    # Training and implementation #
    # --------------------------- #
    classifier1 = isAdversarial(trainingData1);
    classifier2 = whatMethod(trainingData2);
    testClass(classifier1);
    testClass(classifier2);


    # ------- #
    # visuals #
    # ------- #
    printVisuals(trainingData2, classifier1, classifier2);




if __name__ == "__main__":
    main()